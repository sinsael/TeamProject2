//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/PlayerInputSet.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSet: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSet()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSet"",
    ""maps"": [
        {
            ""name"": ""First_Player"",
            ""id"": ""05b6bdc8-a528-4da0-8dac-ebd2a7eb738b"",
            ""actions"": [
                {
                    ""name"": ""Interactable"",
                    ""type"": ""Button"",
                    ""id"": ""2e621698-ad0c-4853-8894-be174a2c8fd3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ae30dcdd-2cb3-4293-9100-1cb514806937"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d83ca344-2609-43b1-83e5-838285118c47"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b1c4832-d277-4c58-92ea-5a21f9908bd3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a55f39fd-8b5c-4df6-afc4-225e97019c3d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1b3dfee4-60ff-4546-a478-40929e64ee97"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6e192500-4b80-475e-8b41-6cc915c1dbe2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""05f3c643-7b9d-4fc1-8a11-efa424c4754c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Second_Player"",
            ""id"": ""1516bda5-00e9-4f89-bffc-842771a6adbd"",
            ""actions"": [
                {
                    ""name"": ""Interactable"",
                    ""type"": ""Button"",
                    ""id"": ""69fff116-664c-4343-acea-7fd44701911e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""af4e7eb6-4a1e-41ed-86f5-31977f2105d9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6a22cb17-50f0-40d0-9f13-d1c17e8e9a9f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b6cf8137-e4cc-4327-a586-cf07196eb196"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40189536-c9a5-418c-bcf6-f27ed8f044e8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b60f4f80-db16-42d7-b998-5a403d6de59b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""03a1b0cb-d822-48ff-a5ae-33f044422a64"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0b3bf06b-5c98-4501-b00f-b1ef32def7b5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // First_Player
        m_First_Player = asset.FindActionMap("First_Player", throwIfNotFound: true);
        m_First_Player_Interactable = m_First_Player.FindAction("Interactable", throwIfNotFound: true);
        m_First_Player_Jump = m_First_Player.FindAction("Jump", throwIfNotFound: true);
        m_First_Player_Movement = m_First_Player.FindAction("Movement", throwIfNotFound: true);
        // Second_Player
        m_Second_Player = asset.FindActionMap("Second_Player", throwIfNotFound: true);
        m_Second_Player_Interactable = m_Second_Player.FindAction("Interactable", throwIfNotFound: true);
        m_Second_Player_Jump = m_Second_Player.FindAction("Jump", throwIfNotFound: true);
        m_Second_Player_Movement = m_Second_Player.FindAction("Movement", throwIfNotFound: true);
    }

    ~@PlayerInputSet()
    {
        UnityEngine.Debug.Assert(!m_First_Player.enabled, "This will cause a leak and performance issues, PlayerInputSet.First_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Second_Player.enabled, "This will cause a leak and performance issues, PlayerInputSet.Second_Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // First_Player
    private readonly InputActionMap m_First_Player;
    private List<IFirst_PlayerActions> m_First_PlayerActionsCallbackInterfaces = new List<IFirst_PlayerActions>();
    private readonly InputAction m_First_Player_Interactable;
    private readonly InputAction m_First_Player_Jump;
    private readonly InputAction m_First_Player_Movement;
    public struct First_PlayerActions
    {
        private @PlayerInputSet m_Wrapper;
        public First_PlayerActions(@PlayerInputSet wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interactable => m_Wrapper.m_First_Player_Interactable;
        public InputAction @Jump => m_Wrapper.m_First_Player_Jump;
        public InputAction @Movement => m_Wrapper.m_First_Player_Movement;
        public InputActionMap Get() { return m_Wrapper.m_First_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(First_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IFirst_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_First_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_First_PlayerActionsCallbackInterfaces.Add(instance);
            @Interactable.started += instance.OnInteractable;
            @Interactable.performed += instance.OnInteractable;
            @Interactable.canceled += instance.OnInteractable;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IFirst_PlayerActions instance)
        {
            @Interactable.started -= instance.OnInteractable;
            @Interactable.performed -= instance.OnInteractable;
            @Interactable.canceled -= instance.OnInteractable;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IFirst_PlayerActions instance)
        {
            if (m_Wrapper.m_First_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFirst_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_First_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_First_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public First_PlayerActions @First_Player => new First_PlayerActions(this);

    // Second_Player
    private readonly InputActionMap m_Second_Player;
    private List<ISecond_PlayerActions> m_Second_PlayerActionsCallbackInterfaces = new List<ISecond_PlayerActions>();
    private readonly InputAction m_Second_Player_Interactable;
    private readonly InputAction m_Second_Player_Jump;
    private readonly InputAction m_Second_Player_Movement;
    public struct Second_PlayerActions
    {
        private @PlayerInputSet m_Wrapper;
        public Second_PlayerActions(@PlayerInputSet wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interactable => m_Wrapper.m_Second_Player_Interactable;
        public InputAction @Jump => m_Wrapper.m_Second_Player_Jump;
        public InputAction @Movement => m_Wrapper.m_Second_Player_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Second_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Second_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(ISecond_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_Second_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Second_PlayerActionsCallbackInterfaces.Add(instance);
            @Interactable.started += instance.OnInteractable;
            @Interactable.performed += instance.OnInteractable;
            @Interactable.canceled += instance.OnInteractable;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(ISecond_PlayerActions instance)
        {
            @Interactable.started -= instance.OnInteractable;
            @Interactable.performed -= instance.OnInteractable;
            @Interactable.canceled -= instance.OnInteractable;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(ISecond_PlayerActions instance)
        {
            if (m_Wrapper.m_Second_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISecond_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_Second_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Second_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Second_PlayerActions @Second_Player => new Second_PlayerActions(this);
    public interface IFirst_PlayerActions
    {
        void OnInteractable(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface ISecond_PlayerActions
    {
        void OnInteractable(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
